#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var socket = require('socket.io');

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var io = socket(server, {
  pingInterval: 10000,
  pingTimeout: 5000
});

io.use((socket, next) => {
  if (socket.handshake.query.token === "UNITY") {
      next();
  } else {
      next(new Error("Authentication error"));
  }
});

io.on('connection', socket => {
  console.log('connection ' + socket.id);

  setTimeout(() => {
    socket.emit('connection', {date: new Date().getTime(), data: "Hello Unity"})
  }, 1000);

  socket.on('nickname', (data)=>{
    socket.nickname = data["nickname"];
    socket.emit("nickname", {date: new Date().getTime(), data : data["nickname"]});
  });

  socket.on('enter', (data)=>{
    let roomName = data["guid"];
    socket.join(roomName);

    let clients = io.sockets.adapter.rooms.get(roomName);
    let nickNameList = [];
    for (const clientId of clients ) {
      const clientSocket = io.sockets.sockets.get(clientId);
      nickNameList.push(clientSocket.nickname);
    }

    io.sockets.in(roomName).emit("roominfo", {date: new Date().getTime(), data : nickNameList});
  });

  socket.on('leave', (data)=>{    
    let roomName = data["guid"];
    socket.leave(roomName);

    if(io.sockets.adapter.rooms.has(roomName))
    {
      let clients = io.sockets.adapter.rooms.get(roomName);
      let nickNameList = [];
      for (const clientId of clients ) {
        const clientSocket = io.sockets.sockets.get(clientId);
        nickNameList.push(clientSocket.nickname);
      }
  
      io.sockets.in(roomName).emit("roominfo", {date: new Date().getTime(), data : nickNameList});
    }
  });

  socket.on('chat', (data) => {
    console.log('chat', data);
    io.sockets.in(socket.rooms).emit('chat', {date: new Date().getTime(), nick : sockets.nick , msg: data});
  });

  socket.on('disconnect', () => {
    socket.rooms.map((item, index)=>{
      console.log("disconnect : " + item);
      socket.leave(item);
      if(io.sockets.adapter.rooms.has(item))
      {
        let userCount = io.sockets.adapter.rooms.get(item).size;
        io.sockets.in(item).emit("userCount", {date: new Date().getTime(), data: userCount});
      }
    });
  });

});